{"version":3,"sources":["webpack:///./src/templates/post.js"],"names":["colors","theme","StyledPostContainer","styled","Main","StyledPostHeader","header","StyledPostContent","div","lightSlate","PostTemplate","data","location","markdownRemark","frontmatter","html","title","date","tags","metaTitle","metaDescription","description","metaUrl","pathname","metaKeywords","config","siteKeywords","length","map","tag","rel","href","property","name","itemProp","content","className","to","Date","toLocaleDateString","year","month","day","i","key","kebabCase","dangerouslySetInnerHTML","__html","pageQuery"],"mappings":"6FAAA,yLAQQA,EAAWC,IAAXD,OAGFE,EAAsBC,YAAOC,KAAV,+EAAGD,CAAH,uBAGnBE,EAAmBF,IAAOG,OAAV,4EAAGH,CAAH,iDAMhBI,EAAoBJ,IAAOK,IAAV,6EAAGL,CAAH,uGAcVH,EAAOS,YA0ELC,UAtEM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EACbD,EAAKE,eAA3BC,EADmC,EACnCA,YAAaC,EADsB,EACtBA,KACbC,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,KAAMC,EAAsBJ,EAAtBI,KAEfC,EAAeH,EAAN,kBACTI,EAHqCN,EAAhBO,YAGN,kBACfC,EAAO,qBAAwBV,EAASW,SACxCC,EAAkBC,IAAOC,aAAb,KAChBR,GAAQA,EAAKS,OAAS,GAAKT,EAAKU,KAAI,SAAAC,GAAG,UAAQA,MAGjD,OACE,kBAAC,IAAD,CAAQjB,SAAUA,GAChB,kBAAC,IAAD,KACE,+BAAQO,GAER,0BAAMW,IAAI,YAAYC,KAAMT,IAC5B,0BAAMU,SAAS,SAASD,KAAMT,IAC9B,0BAAMW,KAAK,cAAcF,KAAMT,IAE/B,0BAAMY,SAAS,OAAOC,QAAShB,IAC/B,0BAAMa,SAAS,WAAWG,QAAShB,IACnC,0BAAMc,KAAK,gBAAgBE,QAAShB,IAEpC,0BAAMa,SAAS,iBAAiBG,QAASf,IACzC,0BAAMa,KAAK,cAAcE,QAASf,IAClC,0BAAMc,SAAS,cAAcC,QAASf,IACtC,0BAAMa,KAAK,sBAAsBE,QAASf,IAE1C,0BAAMa,KAAK,WAAWE,QAASX,KAGjC,kBAACtB,EAAD,KACE,0BAAMkC,UAAU,cACd,0BAAMA,UAAU,SAAhB,KACA,kBAAC,OAAD,CAAMC,GAAG,SAAT,cAGF,kBAAChC,EAAD,KACE,wBAAI+B,UAAU,gBAAgBpB,GAC9B,uBAAGoB,UAAU,YACX,8BACG,IAAIE,KAAKrB,GAAMsB,mBAAmB,QAAS,CAC1CC,KAAM,UACNC,MAAO,OACPC,IAAK,aAGT,qCACCxB,GACCA,EAAKS,OAAS,GACdT,EAAKU,KAAI,SAACC,EAAKc,GAAN,OACP,kBAAC,OAAD,CACEC,IAAKD,EACLN,GAAE,cAAgBQ,IAAUhB,GAA1B,IACFO,UAAU,OAHZ,IAKIP,QAMZ,kBAACtB,EAAD,CAAmBuC,wBAAyB,CAAEC,OAAQhC,KACtD,kBAAC,IAAD,SAaD,IAAMiC,EAAS","file":"component---src-templates-post-js-64aee03a6b2dc211d04e.js","sourcesContent":["import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport kebabCase from 'lodash/kebabCase';\nimport PropTypes from 'prop-types';\nimport { Layout, UtterancesComments } from '@components';\nimport styled from 'styled-components';\nimport { Main, theme } from '@styles';\nconst { colors } = theme;\nimport config from '@config';\n\nconst StyledPostContainer = styled(Main)`\n  max-width: 1000px;\n`;\nconst StyledPostHeader = styled.header`\n  margin-bottom: 50px;\n  .tag {\n    margin-right: 10px;\n  }\n`;\nconst StyledPostContent = styled.div`\n  margin-bottom: 100px;\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin: 2em 0 1em;\n  }\n\n  p {\n    margin: 1em 0;\n    line-height: 1.5;\n    color: ${colors.lightSlate};\n  }\n`;\n\nconst PostTemplate = ({ data, location }) => {\n  const { frontmatter, html } = data.markdownRemark;\n  const { title, date, tags, description } = frontmatter;\n\n  const metaTitle = `${title} | Arjun Nemani`;\n  const metaDescription = `${description} | Arjun Nemani`;\n  const metaUrl = `https://nemani.dev${location.pathname}`;\n  const metaKeywords = `${config.siteKeywords},${\n    tags && tags.length > 0 && tags.map(tag => ` ${tag}`)\n  }`;\n\n  return (\n    <Layout location={location}>\n      <Helmet>\n        <title>{metaTitle}</title>\n\n        <link rel=\"canonical\" href={metaUrl} />\n        <meta property=\"og:url\" href={metaUrl} />\n        <meta name=\"twitter:url\" href={metaUrl} />\n\n        <meta itemProp=\"name\" content={metaTitle} />\n        <meta property=\"og:title\" content={metaTitle} />\n        <meta name=\"twitter:title\" content={metaTitle} />\n\n        <meta property=\"og:description\" content={metaDescription} />\n        <meta name=\"description\" content={metaDescription} />\n        <meta itemProp=\"description\" content={metaDescription} />\n        <meta name=\"twitter:description\" content={metaDescription} />\n\n        <meta name=\"keywords\" content={metaKeywords} />\n      </Helmet>\n\n      <StyledPostContainer>\n        <span className=\"breadcrumb\">\n          <span className=\"arrow\">&larr;</span>\n          <Link to=\"/blog\">All posts</Link>\n        </span>\n\n        <StyledPostHeader>\n          <h1 className=\"medium-title\">{title}</h1>\n          <p className=\"subtitle\">\n            <time>\n              {new Date(date).toLocaleDateString('en-US', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n              })}\n            </time>\n            <span>&nbsp;&mdash;&nbsp;</span>\n            {tags &&\n              tags.length > 0 &&\n              tags.map((tag, i) => (\n                <Link\n                  key={i}\n                  to={`/blog/tags/${kebabCase(tag)}/`}\n                  className=\"tag\"\n                >\n                  #{tag}\n                </Link>\n              ))}\n          </p>\n        </StyledPostHeader>\n\n        <StyledPostContent dangerouslySetInnerHTML={{ __html: html }} />\n        <UtterancesComments />\n      </StyledPostContainer>\n    </Layout>\n  );\n};\n\nexport default PostTemplate;\n\nPostTemplate.propTypes = {\n  data: PropTypes.object,\n  location: PropTypes.object,\n};\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $path } }) {\n      html\n      frontmatter {\n        title\n        description\n        date\n        slug\n        tags\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}